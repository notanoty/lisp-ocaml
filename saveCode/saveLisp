
(* ((lambda (x y)(+ x y)) 1 2) *)
(* ((x . 1) (y . 2)) *)
(* (x y) (1 2) *)
(* (z x y) *)
(* (3 1 2) *)
(*   S_expr ( S_expr(S_expr("Z", Nil), S_expr(1, Nil) ),  *)
(*          *)
(*         (S_expr ( S_expr( "X", S_expr ("Y",  Nil))), *)
(*          S_expr(1, S_expr( 2,  Nil)  ) ) ) *)
(* (  ((z) . (3))  ((x y) . (1 2))  ) *)

(* (define foo (lambda (x) (+ 1 x))) *)

(* (+  ( + 1 2 ) 1) *)
(* apply(+,[3,1]) *)

(* car, cdr, list, quote, if, cond, cons, null *)

(* (list 1 2 3) *)
(* (1 2 3) *)
(* (cond (x y) (z q) ... (f g )) *)

(* (+ ( 2 3) 4)   (apply + ( /6 4)) *)


